{{ range $index, $Map := .ServerCount }}
persistentVolumeClaims:
  - metadata:
      name: "{{.ApplicationName}}-postgresql-claim-{{$index}}"
      labels:
        app: "{{.ApplicationName}}-postgresql-{{$index}}"
        application: "{{.ApplicationName}}"
        service: "{{.ApplicationName}}-postgresql"
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: "1Gi"
## PostgreSQL persistent volume claim END
## KIE server deployment config BEGIN
deploymentConfigs:
  - metadata:
      name: "{{.ApplicationName}}-kieserver-{{$index}}"
      labels:
        app: "{{.ApplicationName}}-kieserver-{{$index}}"
        application: "{{.ApplicationName}}"
        service: "{{.ApplicationName}}-kieserver"
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
    spec:
      strategy:
        type: Recreate
      triggers:
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - "{{.ApplicationName}}-kieserver"
            from:
              kind: ImageStreamTag
              namespace: "openshift"
              name: "rhpam{{.Version}}-kieserver-openshift:{{.ImageTag}}"
        - type: ConfigChange
      replicas: 3
      selector:
        deploymentConfig: "{{.ApplicationName}}-kieserver-{{$index}}"
      template:
        metadata:
          name: "{{.ApplicationName}}-kieserver-{{$index}}"
          labels:
            app: "{{.ApplicationName}}-kieserver-{{$index}}"
            application: "{{.ApplicationName}}"
            service: "{{.ApplicationName}}-kieserver"
            deploymentConfig: "{{.ApplicationName}}-kieserver-{{$index}}"
        spec:
          serviceAccountName: "{{.ApplicationName}}-rhpamsvc"
          terminationGracePeriodSeconds: 60
          containers:
            - name: "{{.ApplicationName}}-kieserver"
              image: "rhpam{{.Version}}-kieserver-openshift"
              imagePullPolicy: Always
              env:
              - name: KIE_ADMIN_USER
                value: adminUser
              - name: KIE_ADMIN_PWD
                value: "{{.AdminPassword}}"
              - name: KIE_SERVER_USER
                value: executionUser
              - name: KIE_SERVER_PWD
                value: "{{.ServerPassword}}"
              - name: DROOLS_SERVER_FILTER_CLASSES
                value: "true"
              - name: KIE_SERVER_CONTROLLER_USER
                value: controllerUser
              - name: KIE_SERVER_CONTROLLER_PWD
                value: "{{.ControllerPassword}}"
              - name: KIE_SERVER_CONTROLLER_SERVICE
                value: "{{.ApplicationName}}-rhpamcentr"
              - name: KIE_SERVER_CONTROLLER_PROTOCOL
                value: ws
              - name: KIE_MBEANS
                value: enabled
              - name: KIE_SERVER_ID
                value: "{{.ApplicationName}}-kieserver-{{$index}}"
              - name: MAVEN_REPOS
                value: EXTERNAL
              - name: SSO_OPENIDCONNECT_DEPLOYMENTS
                value: ROOT.war
              - name: KIE_SERVER_BYPASS_AUTH_USER
                value: "false"
              - name: HTTPS_KEYSTORE_DIR
                value: "/etc/kieserver-secret-volume"
              - name: HTTPS_KEYSTORE
                value: "keystore.jks"
              - name: HTTPS_NAME
                value: "jboss"
              - name: HTTPS_PASSWORD
                value: "{{.KeyStorePassword}}"
              - name: DATASOURCES
                value: "RHPAM"
              - name: RHPAM_DATABASE
                value: "rhpam7"
              - name: RHPAM_JNDI
                value: "java:/jboss/datasources/rhpam"
              - name: RHPAM_JTA
                value: "true"
              - name: KIE_SERVER_PERSISTENCE_DS
                value: "java:/jboss/datasources/rhpam"
              ## H2 driver settings BEGIN
              - name: RHPAM_DRIVER
                value: "h2"
              - name: RHPAM_USERNAME
                value: "sa"
              - name: RHPAM_PASSWORD
                value: "{{.AdminPassword}}"
              - name: RHPAM_XA_CONNECTION_PROPERTY_URL
                value: "jdbc:h2:/opt/eap/standalone/data/rhpam"
              - name: RHPAM_SERVICE_HOST
                value: "dummy_ignored"
              - name: RHPAM_SERVICE_PORT
                value: "12345"
              - name: KIE_SERVER_PERSISTENCE_DIALECT
                value: "org.hibernate.dialect.H2Dialect"
              - name: DROOLS_SERVER_FILTER_CLASSES
                value: "true"
              ## H2 driver settings END
              resources:
                limits:
                  memory: 1Gi
              volumeMounts:
                - name: kieserver-keystore-volume
                  mountPath: "/etc/kieserver-secret-volume"
                  readOnly: true
              livenessProbe:
                exec:
                  command:
                    - "/bin/bash"
                    - "-c"
                    - curl --fail --silent -u "$KIE_ADMIN_USER":"$KIE_ADMIN_PWD" http://localhost:8080/services/rest/server/healthcheck
                initialDelaySeconds: 180
                timeoutSeconds: 2
                periodSeconds: 15
                failureThreshold: 3
              readinessProbe:
                exec:
                  command:
                    - "/bin/bash"
                    - "-c"
                    - curl --fail --silent -u "$KIE_ADMIN_USER":"$KIE_ADMIN_PWD" http://localhost:8080/services/rest/server/readycheck
                initialDelaySeconds: 60
                timeoutSeconds: 2
                periodSeconds: 30
                failureThreshold: 6
              ports:
                - name: jolokia
                  containerPort: 8778
                  protocol: TCP
                - name: http
                  containerPort: 8080
                  protocol: TCP
                - name: https
                  containerPort: 8443
                  protocol: TCP
          volumes:
            - name: kieserver-keystore-volume
              secret:
                secretName: "{{.ApplicationName}}-kieserver-{{$index}}-app-secret"
  ## KIE server deployment config END
  ## PostgreSQL deployment config BEGIN
  - metadata:
      name: "{{.ApplicationName}}-postgresql-{{$index}}"
      labels:
        app: "{{.ApplicationName}}-postgresql-{{$index}}"
        application: "{{.ApplicationName}}"
        service: "{{.ApplicationName}}-postgresql"
    spec:
      strategy:
        type: Recreate
      triggers:
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - "{{.ApplicationName}}-postgresql"
            from:
              kind: ImageStreamTag
              namespace: "openshift"
              name: "postgresql:10"
        - type: ConfigChange
      replicas: 1
      selector:
        deploymentConfig: "{{.ApplicationName}}-postgresql-{{$index}}"
      template:
        metadata:
          name: "{{.ApplicationName}}-postgresql-{{$index}}"
          labels:
            app: "{{.ApplicationName}}-postgresql-{{$index}}"
            application: "{{.ApplicationName}}"
            service: "{{.ApplicationName}}-postgresql"
            deploymentConfig: "{{.ApplicationName}}-postgresql-{{$index}}"
        spec:
          terminationGracePeriodSeconds: 60
          containers:
            - name: "{{.ApplicationName}}-postgresql"
              image: postgresql
              imagePullPolicy: Always
              livenessProbe:
                exec:
                  command:
                    - "/usr/libexec/check-container"
                    - "--live"
                initialDelaySeconds: 120
                timeoutSeconds: 10
              readinessProbe:
                exec:
                  command:
                    - "/usr/libexec/check-container"
                initialDelaySeconds: 5
                timeoutSeconds: 1
              ports:
                - containerPort: 5432
                  protocol: TCP
              volumeMounts:
                - mountPath: "/var/lib/pgsql/data"
                  name: "{{.ApplicationName}}-postgresql-pvol"
              env:
                - name: POSTGRESQL_USER
                  value: "rhpam"
                - name: POSTGRESQL_PASSWORD
                  value: "{{.AdminPassword}}"
                - name: POSTGRESQL_DATABASE
                  value: "rhpam7"
                - name: POSTGRESQL_MAX_PREPARED_TRANSACTIONS
                  value: "100"
          volumes:
            - name: "{{.ApplicationName}}-postgresql-pvol"
              persistentVolumeClaim:
                claimName: "{{.ApplicationName}}-postgresql-claim-{{$index}}"
## PostgreSQL deployment config END
## KIE server services BEGIN
services:
  - spec:
      ports:
        - name: http
          port: 8080
          targetPort: 8080
        - name: https
          port: 8443
          targetPort: 8443
      selector:
        deploymentConfig: "{{.ApplicationName}}-kieserver-{{$index}}"
    metadata:
      name: "{{.ApplicationName}}-kieserver-{{$index}}"
      labels:
        app: "{{.ApplicationName}}-kieserver-{{$index}}"
        application: "{{.ApplicationName}}"
        service: "{{.ApplicationName}}-kieserver"
      annotations:
        description: All the KIE server web server's ports. (KIE server)
  - spec:
      clusterIP: "None"
      ports:
        - name: "ping"
          port: 8888
          targetPort: 8888
      selector:
        deploymentConfig: "{{.ApplicationName}}-kieserver-{{$index}}"
    metadata:
      name: "{{.ApplicationName}}-kieserver-{{$index}}-ping"
      labels:
        app: "{{.ApplicationName}}-kieserver-{{$index}}"
        application: "{{.ApplicationName}}"
        service: "{{.ApplicationName}}-kieserver"
      annotations:
        service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
        description: "The JGroups ping port for clustering."
  ## KIE server services END
  ## PostgreSQL service BEGIN
  - metadata:
      annotations:
        description: The database server's port.
      labels:
        app: "{{.ApplicationName}}-postgresql-{{$index}}"
        application: "{{.ApplicationName}}"
        service: "{{.ApplicationName}}-postgresql"
      name: "{{.ApplicationName}}-postgresql-{{$index}}"
    spec:
      ports:
        - port: 5432
          targetPort: 5432
      selector:
        deploymentConfig: "{{.ApplicationName}}-postgresql-{{$index}}"
## PostgreSQL service END
## KIE server routes BEGIN
routes:
  - id: "{{.ApplicationName}}-kieserver-{{$index}}-https"
    metadata:
      name: "{{.ApplicationName}}-kieserver-{{$index}}"
      labels:
        app: "{{.ApplicationName}}-kieserver-{{$index}}"
        application: "{{.ApplicationName}}"
        service: "{{.ApplicationName}}-kieserver"
      annotations:
        description: Route for KIE server's https service.
    spec:
      to:
        name: "{{.ApplicationName}}-kieserver-{{$index}}"
      port:
        targetPort: https
      tls:
        insecureEdgeTerminationPolicy: Redirect
        termination: passthrough
## KIE server routes END
{{end}}
## RANGE ends
## KIE Servers END